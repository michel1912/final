project: example 
parameter: int discreteDestination
parameter: float x
parameter: float y
parameter: float z 
available_parameters_code: 
__possibleParameters.push_back(std::make_tuple(1,-1.5744997262954712,-0.5154024362564087,-0.001373291015625));
__possibleParameters.push_back(std::make_tuple(2,-1.6243184804916382,0.6617045402526855,-0.00143432617188)); 
__possibleParameters.push_back(std::make_tuple(3,0.986030161381,0.610693752766,-0.00143432617188));

precondition:
__meetPrecondition = discreteDestination != state.robotLocation.discrete;
violate_penalty: -10 
dynamic_model: 
state__.robotLocation.discrete = ! __meetPrecondition || AOS.Bernoulli(0.1) ? -1: discreteDestination;
if(state__.robotLocation.discrete == discreteDestination)
{ 
state__.robotLocation.x = x; 
state__.robotLocation.y = y; 
state__.robotLocation.z = z;
}
for(int i=0; i < state__.tVisitedLocationObjects.size();i++)
{
	if(state__.tVisitedLocationObjects[i]->discrete == state__.robotLocation.discrete) 
	{
	state__.tVisitedLocationObjects[i]->visited = true;
	break;
	}
}
__moduleResponse = (state__.robotLocation.discrete == -1 && AOS.Bernoulli(0.8)) ? eFailed : eSuccess;
__reward = state_.robotLocation.discrete == -1 ? -5 : -(sqrt(pow(state.robotLocation.x-x,2.0)+pow(state.robotLocation.y-y,2.0)))*100;
if (state__.robotLocation.discrete == -1) __reward =  -10;
